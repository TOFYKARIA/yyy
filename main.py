from telethon import TelegramClient, events, functions, types
import asyncio
import time
import random
import aiohttp
import logging
from datetime import datetime
import pytz

# –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–∏ API ID –∏ API Hash
api_id = 'YOUR_API_ID'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
api_hash = 'YOUR_API_HASH'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
prefixes = ['.', '/', '!', '-']
logger = logging.getLogger(__name__)

async def setup_client():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = TelegramClient('session_name', api_id, api_hash)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await ensure_connected(client)

    return client

async def ensure_connected(client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    if not client.is_connected():
        try:
            await client.connect()
            print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            await client.disconnect()
            await asyncio.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            await ensure_connected(client)

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]help'))
async def help_handler(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = """üî± UGCLAWS USERBOT üî±

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ üíß.help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ üíß.anime [nsfw] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ
‚Ä¢ üíß.im [—Ä–µ–∂–∏–º] - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é (—Ä–µ–∂–∏–º—ã: typing/voice/video/game/mixed)
‚Ä¢ üíß.imstop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é
‚Ä¢ üíß.mozg [yes/no] - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å MegaMozg
‚Ä¢ üíß.mozgchance [—á–∏—Å–ª–æ] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ MegaMozg (1 –∫ N)
‚Ä¢ üíß.time - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∏–∫–µ
‚Ä¢ üíß.time_msk - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
‚Ä¢ üíß.time_ekb - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è 
‚Ä¢ üíß.time_omsk - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è
‚Ä¢ üíß.time_samara - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∞–º–∞—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    await event.edit(help_text)

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]anime'))
async def anime_handler(event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ"""
    args = event.raw_text.split()
    if len(args) > 1 and args[1].lower() == "nsfw":
        url = "https://api.waifu.pics/nsfw/waifu"
        caption = "üéó–õ–æ–≤–∏ NSFW —Ñ–æ—Ç–æ!"
    else:
        url = "https://api.waifu.pics/sfw/waifu"
        caption = "üîÆ–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ!"

    message = await event.respond("–≤–∞–Ω —Å–µ–∫..")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if "url" in data:
                        await event.client.send_file(event.chat_id, data["url"], caption=caption)
                        await message.delete()
                    else:
                        await message.edit("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤ –æ—Ç–≤–µ—Ç–µ.")
                else:
                    await message.edit(f"–û—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        await message.edit(f"–û—à–∏–±–∫–∞: {e}")

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]im'))
async def im_handler(event):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é: .im <—Ä–µ–∂–∏–º>
    –†–µ–∂–∏–º—ã: typing/voice/video/game/mixed"""
    args = event.raw_text.split()[1] if len(event.raw_text.split()) > 1 else "mixed"
    mode = args.lower()
    chat_id = event.chat_id

    if chat_id in _imitation_active and _imitation_active[chat_id]:
        await event.edit("‚ùå –ò–º–∏—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return

    _imitation_active[chat_id] = True

    _imitation_tasks[chat_id] = asyncio.create_task(
        _imitate(event.client, chat_id, mode)
    )

    await event.edit(f"üé≠ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n–†–µ–∂–∏–º: {mode}")

_imitation_tasks = {}
_imitation_active = {}

async def _imitate(client, chat_id, mode):
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        while _imitation_active.get(chat_id, False):
            if mode == "typing":
                async with client.action(chat_id, 'typing'):
                    await asyncio.sleep(5)
            elif mode == "voice":
                async with client.action(chat_id, 'record-audio'):
                    await asyncio.sleep(5)
            elif mode == "video":
                async with client.action(chat_id, 'record-video'):
                    await asyncio.sleep(5)
            elif mode == "game":
                async with client.action(chat_id, 'game'):
                    await asyncio.sleep(5)
            elif mode == "mixed":
                actions = ['typing', 'record-audio', 'record-video', 'game']
                async with client.action(chat_id, random.choice(actions)):
                    await asyncio.sleep(5)
    except Exception as e:
        logger.error(f"Imitation error: {e}")
        _imitation_active[chat_id] = False

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]imstop'))
async def imstop_handler(event):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é"""
    chat_id = event.chat_id

    if chat_id in _imitation_active:
        _imitation_active[chat_id] = False
        if chat_id in _imitation_tasks:
            _imitation_tasks[chat_id].cancel()
            del _imitation_tasks[chat_id]

    await event.edit("üö´ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

_db_name = "MegaMozg"

# –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–µ
_time_running = False
_time_timezone = 'Europe/Moscow'

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]time'))
async def time_handler(event):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∏–∫–µ"""
    global _time_running
    if _time_running:
        _time_running = False
        await event.edit("<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>")
    else:
        _time_running = True
        await event.edit("<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–µ –∑–∞–ø—É—â–µ–Ω–æ</b>")
        asyncio.create_task(update_nick(event.client))

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_msk'))
async def time_msk_handler(event):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ú–°–ö"""
    global _time_timezone
    _time_timezone = 'Europe/Moscow'
    await event.edit("<b>–í—Ä–µ–º—è –≤ –Ω–∏–∫–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ –ú–°–ö</b>")

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_ekb'))
async def time_ekb_handler(event):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ï–ö–ë"""
    global _time_timezone
    _time_timezone = 'Asia/Yekaterinburg'
    await event.edit("<b>–í—Ä–µ–º—è –≤ –Ω–∏–∫–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ –ï–ö–ë</b>")

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_omsk'))
async def time_omsk_handler(event):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –û–º—Å–∫"""
    global _time_timezone
    _time_timezone = 'Asia/Omsk'
    await event.edit("<b>—É—Ä–∞ –æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>")

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_samara'))
async def time_samara_handler(event):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –°–∞–º–∞—Ä—É"""
    global _time_timezone
    _time_timezone = 'Europe/Samara'
    await event.edit("<b>—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ –°–∞–º–∞—Ä—É!</b>")

async def update_nick(client):
    while _time_running:
        try:
            tz = pytz.timezone(_time_timezone)
            current_time = datetime.now(tz).strftime("%H:%M")
            double_struck_time = to_double_struck(current_time)
            double_struck_bar = "ùïÄ"

            me = await client.get_me()
            current_nick = me.first_name.split('ùïÄ')[0].strip()
            new_nick = f"{current_nick} {double_struck_bar} {double_struck_time}"

            await client(functions.account.UpdateProfileRequest(first_name=new_nick))

            now = datetime.now()
            sleep_time = 60 - now.second
            await asyncio.sleep(sleep_time)
        except Exception as e:
            logger.error(f"Nick update error: {e}")
            await asyncio.sleep(60)

def to_double_struck(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —à—Ä–∏—Ñ—Ç Double Struck"""
    normal = "0123456789:"
    double_struck = "ùüòùüôùüöùüõùüúùüùùüûùüüùü†ùü°:"
    translation = str.maketrans(normal, double_struck)
    return text.translate(translation)

db = {}

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]mozg'))
async def mozg_handler(event):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –¥—É—Ä–∞—á–∫–∞ –≤ —á–∞—Ç–µ (on/off)"""
    if not event.chat:
        return
    
    chat = event.chat.id
    args = event.raw_text.split(maxsplit=1)[1] if len(event.raw_text.split()) > 1 else ""
    
    if args.lower() not in ["on", "off"]:
        await event.edit("<b>[MegaMozg]</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .mozg on –∏–ª–∏ .mozg off")
        return
        
    if args.lower() == "on":
        chats = db.get(_db_name, {}).get("chats", [])
        chats.append(chat)
        chats = list(set(chats))
        db.setdefault(_db_name, {})["chats"] = chats
        await event.edit("<b>[MegaMozg]</b> –í–∫–ª—é—á—ë–Ω")
    else:
        chats = db.get(_db_name, {}).get("chats", [])
        try:
            chats.remove(chat)
        except:
            pass
        chats = list(set(chats))
        db.setdefault(_db_name, {})["chats"] = chats
        await event.edit("<b>[MegaMozg]</b> –í—ã–∫–ª—é—á–µ–Ω")

@events.register(events.NewMessage(pattern=f'[{"".join(prefixes)}]mozgchance'))
async def mozgchance_handler(event):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ 1 –∫ N"""
    args = event.raw_text.split(maxsplit=1)[1] if len(event.raw_text.split()) > 1 else ""
    if args.isdigit():
        db.setdefault(_db_name, {})["chance"] = int(args)
        await event.edit(f"<b>[MegaMozg]</b> {args}")
    else:
        await event.edit("<b>[MegaMozg]</b> –ù—É–∂–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç")

@events.register(events.NewMessage())
async def mozg_watcher(event):
    if not isinstance(event, types.Message):
        return
    if event.sender_id == (await event.client.get_me()).id or not event.chat:
        return
    if event.chat.id not in db.get(_db_name, {}).get("chats", []):
        return
    ch = db.get(_db_name, {}).get("chance", 0)
    if ch != 0 and random.randint(0, ch) != 0:
        return

    text = event.raw_text
    words = {random.choice(list(filter(lambda x: len(x) >= 3, text.split()))) for _ in ".."}
    msgs = []
    for word in words:
        async for x in event.client.iter_messages(event.chat.id, search=word):
            if x.replies and x.replies.max_id:
                msgs.append(x)
    if not msgs:
        return

    replier = random.choice(msgs)
    sid = replier.id
    eid = replier.replies.max_id
    msgs = []
    async for x in event.client.iter_messages(event.chat.id, ids=list(range(sid + 1, eid + 1))):
        if x and x.reply_to and x.reply_to.reply_to_msg_id == sid:
            msgs.append(x)
    if msgs:
        msg = random.choice(msgs)
        await event.reply(msg)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    client = await setup_client()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    handlers = [
        help_handler,
        anime_handler,
        im_handler,
        imstop_handler,
        mozg_handler,
        mozgchance_handler,
        mozg_watcher,
        time_handler,
        time_msk_handler,
        time_ekb_handler,
        time_omsk_handler,
        time_samara_handler
    ]
    
    for handler in handlers:
        client.add_event_handler(handler)

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
